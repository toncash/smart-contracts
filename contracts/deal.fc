#include "imports/stdlib.fc";
#include "imports/utils.fc";
#include "imports/op-codes.fc";
#include "imports/error-codes.fc";

(slice, slice, slice, cell) load_data () inline_ref {
    var ds = get_data().begin_parse();
    return (
            ds~load_msg_addr(),   ;; owner_address
            ds~load_msg_addr(),   ;; account
            ds~load_msg_addr(),    ;; address of buyer
            ds~load_ref()      ;; cell with slice master_address
    );
}

() save_data(slice owner_address, slice account, slice buyer_address, cell cell_with_master_address) impure inline {
    set_data(begin_cell()
            .store_slice(owner_address)
            .store_slice(account)
            .store_slice(buyer_address)
            .store_ref(cell_with_master_address)
            .end_cell()
    );
}

() store_history_to_account(int query_id, slice account, slice buyer_address, int op_id) impure inline {
    var msg_body = begin_cell()
            .store_uint(op_id, 32)
            .store_uint(query_id, 64)
            .store_slice(buyer_address)
            .end_cell();

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(account)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body)
            .end_cell();
    send_raw_message(msg, 1);
}

() cancel_deal_withour_fee(slice owner_address, int my_balance, int query_id, slice buyer_address, slice account) impure inline {

    store_history_to_account(query_id, account, buyer_address, op::cancel_deal());

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner_address)
            .store_coins(my_balance)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
    send_raw_message(msg, 128);
}

() complete_deal(int query_id, slice account, slice buyer_address, int my_balance) impure inline {
    store_history_to_account(query_id, account, buyer_address, op::complete_deal());

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(buyer_address)
            .store_coins(my_balance)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
    send_raw_message(msg, 128);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    (slice owner_address, slice account, slice buyer_address, cell cell_with_master_address) = load_data();

    slice sender_address = parse_sender_address(in_msg_full);
    throw_unless(error::authorization(),
            equal_slices(sender_address, owner_address)
                    |
                    equal_slices(sender_address, account)
    );
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);


    if(op == op::create_deal()){
        return();
    }

    if(op == op::cancel_deal()){    ;;  cancel a deal
        throw_unless(error::not_active(),
                ~ equal_slices(buyer_address, owner_address)
        );
        cancel_deal_withour_fee(owner_address, my_balance, query_id, buyer_address, account);
;;         save_data(owner_address, account, owner_address, cell_with_master_address);
        return();
    }

    if(op == op::complete_deal()){
        throw_unless(error::authorization(),
                equal_slices(sender_address, owner_address) ;; if we have a buyer
        );

        throw_unless(error::not_active(),
                ~ equal_slices(owner_address, buyer_address));


        complete_deal(query_id, account, buyer_address, my_balance);
        return ();
    }

    throw(error::illegal_op());
}

(slice, slice, slice, cell) get_deal_data() method_id {
    (slice owner_address, slice account, slice buyer_address, cell cell_with_master_address) = load_data();
    return (owner_address, account, buyer_address, cell_with_master_address);
}