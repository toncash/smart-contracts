#include "imports/stdlib.fc";
#include "imports/utils.fc";

(slice, slice, slice) load_data () inline_ref {
    var ds = get_data().begin_parse();
    return (
            ds~load_msg_addr(),   ;; owner_address
            ds~load_msg_addr(),   ;; history_keeper
            ds~load_msg_addr()    ;; address of buyer
    );
}


() save_data(slice owner_address, slice history_keeper, slice buyer_address) impure inline {
    set_data(begin_cell()
            .store_slice(owner_address)
            .store_slice(history_keeper)
            .store_slice(buyer_address)
            .end_cell()
    );
}

() cancel_deal_withour_fee(slice owner_address, int my_balance) impure inline {

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner_address)
            .store_coins(my_balance)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
    send_raw_message(msg, 128);
}

;; () cancel_deal_with_fee(slice owner_address, slice history_keeper) {
;;
;;     var msg = begin_cell()
;;             .store_uint(0x18, 6)
;;             .store_slice(owner_address)
;;             .store_coins(my_balance)
;;             .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
;;             .end_cell();
;;     send_raw_message(msg, 128);
;;
;; }

;; () complete_deal(slice history_keeper, slice buyer_address) impure inline {
;;
;;     cell msg_body = begin_cell()
;;             .store_uint(3, 32) ;; op == 3 in history_keeper
;;             .store_uint(555, 64)
;;             .end_cell();
;;
;;     var msg = begin_cell()
;;             .store_uint(0x10, 6)
;;             .store_slice(history_keeper)
;;             .store_grams(0)
;;             .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
;;             .store_ref(msg_body);
;;
;;     send_raw_message(msg.end_cell(), 1);
;;
;;     var msg_balance = begin_cell() ;; send ton to buyer
;;             .store_uint(0x18, 6)
;;             .store_slice(buyer_address)
;;             .store_coins(my_balance)
;;             .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
;;             .end_cell();
;;     send_raw_message(msg_balance, 128);
;; }


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    (slice owner_address, slice history_keeper, slice buyer_address) = load_data();

    slice sender_address = parse_sender_address(in_msg_full);
    throw_unless(1000,
            equal_slices(sender_address, owner_address)
                    |
                    equal_slices(sender_address, history_keeper)
    );
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);


    if(op == 1){
;;         ~strdump("op 1 step!");
        return();
    }

    if(op == 2){
        ;; confirm_deal()
        throw_unless(1000,
                equal_slices(sender_address, owner_address)
                        &
                        equal_slices(owner_address, buyer_address) ;; if we still don't have a buyer
        );

        slice real_buyer_address = in_msg_body~load_msg_addr();
        save_data(owner_address, history_keeper, real_buyer_address);

        cell msg_body = begin_cell()
                .store_uint(2, 32) ;; op == 2 in history_keeper
                .store_uint(555, 64)
                .end_cell();

        var msg = begin_cell()
                .store_uint(0x10, 6)
                .store_slice(history_keeper)
                .store_grams(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(msg_body);

        send_raw_message(msg.end_cell(), 1);
        return();
    }

    if(op == 3){    ;;  cancel a deal
        throw_unless(1000,
                equal_slices(sender_address, owner_address)
        );
        cancel_deal_withour_fee(owner_address, my_balance);
        return();
    }

    if(op == 4){
        throw_unless(1001,
                equal_slices(sender_address, owner_address)
                        &
                        ~ equal_slices(owner_address, buyer_address) ;; if we have a buyer
        );
;;         cancel_deal_with_fee();
    }

    if(op == 5){ ;; complete deal
        throw_unless(1005,
                equal_slices(sender_address, owner_address)
                        &
                        ~ equal_slices(owner_address, buyer_address) ;; if we have a buyer
        );


;;         complete_deal(history_keeper, buyer_address);
    }

    throw(0xffff);
}

(slice, slice, slice) get_deal_data() method_id {
    (slice owner_address, slice history_keeper, slice buyer_address) = load_data();
    return (owner_address, history_keeper, buyer_address);
}