#pragma version >=0.2.0;
#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";


(slice, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return (
            ds~load_msg_addr(), ;; admin_address
            ds~load_ref(),  ;; account_code
            ds~load_ref()   ;; deal_code
    );
}

() save_data() impure inline_ref {
    set_data(begin_cell().end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    (slice admin_address, cell account_code, cell deal_code) = load_data();

    slice sender_address = parse_sender_address(in_msg_full);

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if(op == op::create_account()){
        slice buyer_address = in_msg_body~load_msg_addr();

        cell state_init = calculate_account_state_init(sender_address, 0, 0, my_address(), deal_code, account_code);
        slice to_account_address = calculate_address(state_init);

        cell msg_body = begin_cell()
                .store_uint(op::create_deal(), 32)
                .store_uint(query_id, 64)
                .store_slice(buyer_address)
                .end_cell();

        var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(to_account_address)
                .store_coins(msg_value)
                .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_ref(state_init)
                .store_ref(msg_body);

        send_raw_message(msg.end_cell(), 1);
    }
}

() recv_external(slice in_msg_body) impure {
    ;; handle external messages
}

(slice, cell, cell) get_master_data() method_id {
    return load_data();
}
